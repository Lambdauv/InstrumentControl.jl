{
    "docs": [
        {
            "location": "/", 
            "text": "PainterQB.jl\n\n\nA \nJulia\n package for qubit measurement and analysis.\n\n\n\n\nInstallation\n\n\n\n\nInstall \nNational Instruments VISA libraries\n  (tested with v15.0.1 on Windows 10)\n\n\nInstall \nAlazarTech\n digitizer drivers and shared libraries  (may need to contact AlazarTech)\n\n\nInstall \nVISA.jl\n\n\nInstall \nAlazar.jl\n\n\nInstall \nPainterQB.jl\n\n\n\n\n\n\nQuick start\n\n\nusing PainterQB\nusing PainterQB.Alazar\nusing PainterQB.AWG5014C  # etc.\n\nawg = InsAWG5014C(tcpip_socket(\n1.2.3.4\n,5000))\nats = InsAlazarATS9360()\n\n# do something with awg and ats", 
            "title": "Home"
        }, 
        {
            "location": "/#painterqbjl", 
            "text": "A  Julia  package for qubit measurement and analysis.", 
            "title": "PainterQB.jl"
        }, 
        {
            "location": "/#installation", 
            "text": "Install  National Instruments VISA libraries   (tested with v15.0.1 on Windows 10)  Install  AlazarTech  digitizer drivers and shared libraries  (may need to contact AlazarTech)  Install  VISA.jl  Install  Alazar.jl  Install  PainterQB.jl", 
            "title": "Installation"
        }, 
        {
            "location": "/#quick-start", 
            "text": "using PainterQB\nusing PainterQB.Alazar\nusing PainterQB.AWG5014C  # etc.\n\nawg = InsAWG5014C(tcpip_socket( 1.2.3.4 ,5000))\nats = InsAlazarATS9360()\n\n# do something with awg and ats", 
            "title": "Quick start"
        }, 
        {
            "location": "/design/", 
            "text": "Design overview\n\n\n\n\nWhat should good measurement code do?\n\n\nAnyone who has written code in MATLAB or something comparable (IGOR Pro, in the author's case) has undoubtedly seen spaghetti code. Often there are many copies of a measurement routine that differ only slightly, perhaps in the functionality of what happens inside some for loop, etc.\n\n\nWe would like to have clear, reusable code to avoid redundancy and accidental errors, both of which consume precious time on the part of the experimenters. Consider an archetypal measurement scheme wherein we measure a device's response to various stimuli (perhaps we measure current as a function of applied bias). We should be able to write just one sweep function to do this.\n\n\nThe idea of \nmultiple dispatch\n, natively supported in Julia, permits writing such convenient and abstract code. This is just one example where the advantages of multiple dispatch are obvious. We hope it will more broadly simplify the extension of measurement code while ensuring continued reliability.\n\n\n\n\nHow do we take measurements?\n\n\n\n\nSource and measure\n\n\nTwo functions are provided to abstract away many kinds of measurements: \nsource\n and \nmeasure\n. In an experiment you source some stimulus and measure a response. Therefore \nsource\n takes as an argument an object matching type signature \nStimulus\n, which can have different fields for different types of stimuli, as well as some value. \nmeasure\n takes as an argument an object matching type signature \nResponse\n. The idea is to write new subtypes of \nStimulus\n and \nResponse\n to describe what you are doing, as well as new methods for \nsource\n and \nmeasure\n.\n\n\n\n\nStimuli\n\n\nAll stimuli are objects, subtyped from the abstract \nStimulus\n type. Many stimuli, associated with the capabilities of particular instruments, are already implemented.\n\n\nNot all stimuli are associated with a physical instrument. For instance, sourcing a \nDelayStimulus\n will cause the script to block until a specified time after creation of the \nDelayStimulus\n object.\n\n\nStimuli could also be associated with several instruments. Maybe a stimulus that makes sense for a particular experiment would be to change all gate voltages at once. These gate voltages could of course be sourced by several physical instruments.\n\n\n\n\nResponses\n\n\nAll responses are objects, subtyped from the abstract \nResponse\n type. Usually a response is associated with a particular instrument.\n\n\nHowever, responses need not come from instruments. For test purposes, suppose we want to mimic a measurement by generating random numbers. \nRandomResponse\n produces a random number in the unit interval when it is measured. A \nTimerResponse\n will measure the time since creation of the \nTimerResponse\n object.\n\n\n\n\nWhat is an instrument?\n\n\nFor the purposes of this package, an instrument is just something connected to the computer that we need to communicate with, and which can source or measure something. Every instrument may connect to the computer by different hardware, comms protocols, and command dialects.\n\n\nAll instruments are Julia objects, subtypes of the abstract type \nInstrument\n.\n\n\n\n\nInstrument types\n\n\nMany instruments share the same communications protocols. We subtype \nInstrument\n based on these protocols.\n\n\n\n\nVISA\n\n\nMany instruments are able to be addressed using the \nVISA\n standard (Virtual Instrument Software Architecture), currently maintained by the IVI Foundation. \nInstrumentVISA\n is an abstract subtype of \nInstrument\n.\n\n\nTo talk to VISA instruments will require the Julia package \nVISA.jl\n as well as the \nNational Instruments VISA libraries\n. Installation instructions are available at each link.\n\n\n\n\nAlazar digitizers\n\n\nDigitizers made by \nAlazarTech\n are notably \nnot\n compatible with the VISA standard. All Alazar digitizers are addressable by an API supplied by the company, which talks to the card through a shared library (a .dll on Windows or .so on Linux). \nInstrumentAlazar\n is an abstract subtype of \nInstrument\n.\n\n\nThe shared library files and API documentation are only available from AlazarTech.\n\n\n\n\nHow do we configure instruments?\n\n\n\n\nProperties\n\n\nInstrument properties are configured and inspected using two functions, \nsetindex!\n and \ngetindex\n. This results in a convenient and concise syntax (\ncredit due to Oliver Schulz\n for this idea).\n\n\nFor example:\n\n\nawg\n[\nTriggerSlope\n]\n \n=\n \n:\nRising\n\n\nawg\n[\nSampleRate\n]\n \n=\n \n10e6\n\n\n\n\n\n\n\n\nDifference between stimuli and instrument properties\n\n\nBecause a stimulus is defined so broadly, the difference between a stimulus and an instrument property is not obvious. A stimulus is like a generalized instrument property: sourcing a stimulus may entail configuring zero or more instrument properties.\n\n\nIt is useful to think of a stimulus to be something that what you are measuring has a chance to react to. For example, this could be applied voltage, sourced by one or more instruments. The applied voltages would be seen by the device under test, which would respond accordingly. The stimulus could also just be a time delay, provided by the measurement computer. It could even be the number of threads used by Julia for real-time processing.\n\n\nAn instrument property is any persistent setting of an instrument. Tweaking an instrument property could affect the device under test, but it might not. Averaging is a good example. With averaging a measurement may look less noisy, but your device under test doesn't know the difference. The trigger engine of a digitizer would also have associated instrument properties.\n\n\nIn many cases there is an overlap between stimuli and properties. Consider that the frequency of a signal generator is an instrument property. In this case sourcing a frequency stimulus results in configuring an instrument property. Rather than make a \nFrequencyStimulus\n type, we provide a \nPropertyStimulus\n type which can be used more generically. Consider the following example, where we make a \nPropertyStimulus\n for sweeping the frequency of our E8257D signal generator:\n\n\nstim\n \n=\n \nPropertyStimulus\n(\nsiggen\n::\nE8257D\n,\n \nFrequency\n)\n\n\nfor\n \nfreq\n \nin\n \n1e9\n:\n1e8\n:\n5e9\n     \n# 1 GHz to 5 GHz in steps of 100 MHz\n\n    \nsource\n(\nstim\n,\n \nfreq\n)\n\n    \n# measure(something)\n\n\nend\n\n\n\n\n\n\nNote that \nFrequency\n is a subtype of \nInstrumentProperty\n, which is required for making a \nPropertyStimulus\n.\n\n\nAgain, stimuli need not be tied to a particular property. Rather, this is just one convenient and easily generalized example. In more complicated instances it is probably better to make a new \nStimulus\n subtype rather than use \nPropertyStimulus\n.\n\n\n\n\nFuture directions\n\n\n\n\nFeedback loops\n\n\nIn principle, asynchronous software feedback loops could be implemented with the \nReactive.jl\n package. This would probably only be suitable for slowly varying signals, e.g. PID temperature control. Ultimately benchmarking needs to be done to determine how useful this approach would be.", 
            "title": "Design"
        }, 
        {
            "location": "/design/#design-overview", 
            "text": "", 
            "title": "Design overview"
        }, 
        {
            "location": "/design/#what-should-good-measurement-code-do", 
            "text": "Anyone who has written code in MATLAB or something comparable (IGOR Pro, in the author's case) has undoubtedly seen spaghetti code. Often there are many copies of a measurement routine that differ only slightly, perhaps in the functionality of what happens inside some for loop, etc.  We would like to have clear, reusable code to avoid redundancy and accidental errors, both of which consume precious time on the part of the experimenters. Consider an archetypal measurement scheme wherein we measure a device's response to various stimuli (perhaps we measure current as a function of applied bias). We should be able to write just one sweep function to do this.  The idea of  multiple dispatch , natively supported in Julia, permits writing such convenient and abstract code. This is just one example where the advantages of multiple dispatch are obvious. We hope it will more broadly simplify the extension of measurement code while ensuring continued reliability.", 
            "title": "What should good measurement code do?"
        }, 
        {
            "location": "/design/#how-do-we-take-measurements", 
            "text": "", 
            "title": "How do we take measurements?"
        }, 
        {
            "location": "/design/#source-and-measure", 
            "text": "Two functions are provided to abstract away many kinds of measurements:  source  and  measure . In an experiment you source some stimulus and measure a response. Therefore  source  takes as an argument an object matching type signature  Stimulus , which can have different fields for different types of stimuli, as well as some value.  measure  takes as an argument an object matching type signature  Response . The idea is to write new subtypes of  Stimulus  and  Response  to describe what you are doing, as well as new methods for  source  and  measure .", 
            "title": "Source and measure"
        }, 
        {
            "location": "/design/#stimuli", 
            "text": "All stimuli are objects, subtyped from the abstract  Stimulus  type. Many stimuli, associated with the capabilities of particular instruments, are already implemented.  Not all stimuli are associated with a physical instrument. For instance, sourcing a  DelayStimulus  will cause the script to block until a specified time after creation of the  DelayStimulus  object.  Stimuli could also be associated with several instruments. Maybe a stimulus that makes sense for a particular experiment would be to change all gate voltages at once. These gate voltages could of course be sourced by several physical instruments.", 
            "title": "Stimuli"
        }, 
        {
            "location": "/design/#responses", 
            "text": "All responses are objects, subtyped from the abstract  Response  type. Usually a response is associated with a particular instrument.  However, responses need not come from instruments. For test purposes, suppose we want to mimic a measurement by generating random numbers.  RandomResponse  produces a random number in the unit interval when it is measured. A  TimerResponse  will measure the time since creation of the  TimerResponse  object.", 
            "title": "Responses"
        }, 
        {
            "location": "/design/#what-is-an-instrument", 
            "text": "For the purposes of this package, an instrument is just something connected to the computer that we need to communicate with, and which can source or measure something. Every instrument may connect to the computer by different hardware, comms protocols, and command dialects.  All instruments are Julia objects, subtypes of the abstract type  Instrument .", 
            "title": "What is an instrument?"
        }, 
        {
            "location": "/design/#instrument-types", 
            "text": "Many instruments share the same communications protocols. We subtype  Instrument  based on these protocols.", 
            "title": "Instrument types"
        }, 
        {
            "location": "/design/#visa", 
            "text": "Many instruments are able to be addressed using the  VISA  standard (Virtual Instrument Software Architecture), currently maintained by the IVI Foundation.  InstrumentVISA  is an abstract subtype of  Instrument .  To talk to VISA instruments will require the Julia package  VISA.jl  as well as the  National Instruments VISA libraries . Installation instructions are available at each link.", 
            "title": "VISA"
        }, 
        {
            "location": "/design/#alazar-digitizers", 
            "text": "Digitizers made by  AlazarTech  are notably  not  compatible with the VISA standard. All Alazar digitizers are addressable by an API supplied by the company, which talks to the card through a shared library (a .dll on Windows or .so on Linux).  InstrumentAlazar  is an abstract subtype of  Instrument .  The shared library files and API documentation are only available from AlazarTech.", 
            "title": "Alazar digitizers"
        }, 
        {
            "location": "/design/#how-do-we-configure-instruments", 
            "text": "", 
            "title": "How do we configure instruments?"
        }, 
        {
            "location": "/design/#properties", 
            "text": "Instrument properties are configured and inspected using two functions,  setindex!  and  getindex . This results in a convenient and concise syntax ( credit due to Oliver Schulz  for this idea).  For example:  awg [ TriggerSlope ]   =   : Rising  awg [ SampleRate ]   =   10e6", 
            "title": "Properties"
        }, 
        {
            "location": "/design/#difference-between-stimuli-and-instrument-properties", 
            "text": "Because a stimulus is defined so broadly, the difference between a stimulus and an instrument property is not obvious. A stimulus is like a generalized instrument property: sourcing a stimulus may entail configuring zero or more instrument properties.  It is useful to think of a stimulus to be something that what you are measuring has a chance to react to. For example, this could be applied voltage, sourced by one or more instruments. The applied voltages would be seen by the device under test, which would respond accordingly. The stimulus could also just be a time delay, provided by the measurement computer. It could even be the number of threads used by Julia for real-time processing.  An instrument property is any persistent setting of an instrument. Tweaking an instrument property could affect the device under test, but it might not. Averaging is a good example. With averaging a measurement may look less noisy, but your device under test doesn't know the difference. The trigger engine of a digitizer would also have associated instrument properties.  In many cases there is an overlap between stimuli and properties. Consider that the frequency of a signal generator is an instrument property. In this case sourcing a frequency stimulus results in configuring an instrument property. Rather than make a  FrequencyStimulus  type, we provide a  PropertyStimulus  type which can be used more generically. Consider the following example, where we make a  PropertyStimulus  for sweeping the frequency of our E8257D signal generator:  stim   =   PropertyStimulus ( siggen :: E8257D ,   Frequency )  for   freq   in   1e9 : 1e8 : 5e9       # 1 GHz to 5 GHz in steps of 100 MHz \n     source ( stim ,   freq ) \n     # measure(something)  end   Note that  Frequency  is a subtype of  InstrumentProperty , which is required for making a  PropertyStimulus .  Again, stimuli need not be tied to a particular property. Rather, this is just one convenient and easily generalized example. In more complicated instances it is probably better to make a new  Stimulus  subtype rather than use  PropertyStimulus .", 
            "title": "Difference between stimuli and instrument properties"
        }, 
        {
            "location": "/design/#future-directions", 
            "text": "", 
            "title": "Future directions"
        }, 
        {
            "location": "/design/#feedback-loops", 
            "text": "In principle, asynchronous software feedback loops could be implemented with the  Reactive.jl  package. This would probably only be suitable for slowly varying signals, e.g. PID temperature control. Ultimately benchmarking needs to be done to determine how useful this approach would be.", 
            "title": "Feedback loops"
        }, 
        {
            "location": "/implementation/", 
            "text": "Implementation overview\n\n\n\n\nCode organization\n\n\n\n\nEach instrument is defined within its own module, a submodule of \nPainterQB\n. Each instrument is a subtype of \nInstrumentVISA \n: Instrument\n. By convention, instrument model numbers are used for module definitions (e.g. \nAWG5014C\n), so type names have \"Ins\" prepended (e.g. \nInsAWG5014\n).\n\n\nInstrumentVISA\n and associated functions are defined in \nsrc/VISA.jl\n.\n\n\nLow-level wrappers for shared libraries are kept in their own packages (e.g. \nVISA\n and \nAlazar\n calls). This way, at least some code can be reused if someone else does not want to use our codebase.\n\n\nEarly instrument definitions and functions like \nInstrument\n and \nInstrumentException\n are defined in \nsrc/Definitions.jl\n. If there is ever trouble with \nInstrumentProperty\n subtypes not being defined by the time they are used in a function, they can be defined and exported manually here.\n\n\nexport\n statements from an instrument submodule are not currently exported from \nPainterQB\n. Therefore you may want to type \nusing PainterQB.AWG5014C\n when using the AWG, for instance.\n\n\n\n\n\n\nMetaprogramming for VISA instruments\n\n\nMany commercial instruments support a common communications protocol and command syntax (VISA and SCPI respectively). For such instruments, methods for \nsetindex!\n and \ngetindex\n can be generated with metaprogramming, rather than typing them out explicitly.\n\n\nThe file \nsrc/Metaprogramming.jl\n is used heavily for code generation based on JSON template files. Since much of the logic for talking to instruments is the same between VISA instruments, in some cases no code needs to be written to control a new instrument provided an appropriate template file is prepared. The metaprogramming functions are described below although they are not intended to be used interactively.\n\n\n#\n\n\nPainterQB.insjson\n \n \nFunction\n.\n\n\n\n\ninsjson(file::AbstractString)\n\n\nParses a JSON file with a standardized schema to describe how to control an instrument.\n\n\nHere is an example of a valid JSON file with valid schema for parsing:\n\n\n{\n\n    \ninstrument\n:{\n\n            \nmodule\n:\nE5071C\n,\n\n            \ntype\n:\nInsE5071C\n,\n\n            \nmake\n:\nKeysight\n,\n\n            \nmodel\n:\nE5071C\n,\n\n            \nwriteterminator\n:\n\\n\n\n    \n},\n\n    \nproperties\n:[\n\n        \n{\n\n            \ncmd\n:\n:CALCch:TRACtr:CORR:EDEL:TIME\n,\n\n            \ntype\n:\nVNA.ElectricalDelay\n,\n\n            \nvalues\n:[\n\n                \nv::Real\n\n            \n],\n\n            \ninfixes\n:[\n\n                \nch::Integer=1\n,\n\n                \ntr::Integer=1\n\n            \n],\n\n            \ndoc\n:\n \nMy documentation\n\n        \n}\n\n    \n]\n\n\n}\n\n\n\n\n\n\nAfter loading with \nJSON.parse\n, all dictionary keys are converted to symbols. The \ninstrument\n dictionary is described in the \ngenerate_instruments\n documentation. The \nproperties\n array contains one or more dictionaries, each with keys:\n\n\n\n\ncmd\n: Specifies what must be sent to the instrument (it should be terminated with \"?\" for query-only). The lower-case characters are replaced by infix arguments.\n\n\ntype\n: Specifies the \nInstrumentProperty\n subtype to use this command. Will be parsed and evaluated.\n\n\nvalues\n: Specifies the required arguments for \nsetindex!\n which will appear after \ncmd\n in the string sent to the instrument.\n\n\ninfixes\n: Specifies the infix arguments in \ncmd\n. Symbol names must match infix arguments. This key is not required if there are no infixes.\n\n\ndoc\n: Specifies documentation for the generated Julia functions. This key is not required if there is no documentation. This is used not only for interactive help but also in generating the documentation you are reading.\n\n\n\n\nThe value of the \nproperties.type\n field and entries in the \nproperties.values\n and \nproperties.infixes\n arrays are parsed by Julia into expressions or symbols for further manipulation.\n\n\ninsjson{T\n:Instrument}(::Type{T})\n\n\nSimple wrapper to call \ninsjson\n on the appropriate file path for a given instrument type.\n\n\n#\n\n\nPainterQB.generate_all\n \n \nFunction\n.\n\n\n\n\ngenerate_all(metadata)\n\n\nThis function takes a dictionary of instrument metadata, typically obtained from a call to \ninsjson\n. It will go through the following steps:\n\n\n\n\ngenerate_instruments\n part 1: If the module for this instrument does not already exist, generate it and import required modules and symbols.\n\n\ngenerate_instruments\n part 2: Define the \nInstrument\n subtype and the \nmake\n and \nmodel\n methods (\nmake\n and \nmodel\n are defined in \nsrc/Definitions.jl\n). Export the subtype.\n\n\ngenerate_properties\n: Generate instrument properties if they do not exist already, and do any necessary importing and exporting.\n\n\ngenerate_handlers\n: Generate \"handler\" methods to convert between symbols and SCPI string args.\n\n\ngenerate_inspect\n: Generate \ngetindex\n methods for instrument properties.\n\n\ngenerate_configure\n: Generate \nsetindex!\n methods for instrument properties.\n\n\n\n\ngenerate_all\n should be called near the start of an instrument's .jl file, if one exists. It is not required to have a source file for each instrument if the automatically generated code is sufficient.\n\n\n#\n\n\nPainterQB.generate_instruments\n \n \nFunction\n.\n\n\n\n\ngenerate_instruments(metadata)\n\n\nThis function takes a dictionary of metadata, typically obtained from a call to \ninsjson\n. It operates on the \n:instrument\n field of the dictionary which is expected to have the following structure:\n\n\n\n\nmodule\n: The module name. Can already exist but is created if it does not. This field is converted from a string to a \nSymbol\n by \ninsjson\n.\n\n\ntype\n: The name of the type to create for the new instrument. This field is converted from a string to a \nSymbol\n by \ninsjson\n.\n\n\nsuper\n: This field is optional. If provided it will be the supertype of the new instrument type, otherwise the supertype will be \nInstrumentVISA\n. This field is converted from a string to a \nSymbol\n by \ninsjson\n.\n\n\nmake\n: The make of the instrument, e.g. Keysight, Tektronix, etc.\n\n\nmodel\n: The model of the instrument, e.g. E5071C, AWG5014C, etc.\n\n\nwriteterminator\n: Write termination string for sending SCPI commands.\n\n\n\n\nBy convention we typically have the module name be the same as the model name, and the type is just the model prefixed by \"Ins\", e.g. \nInsE5071C\n. This is not required.\n\n\n#\n\n\nPainterQB.generate_properties\n \n \nFunction\n.\n\n\n\n\ngenerate_properties{S\n:Instrument}(instype::Type{S}, p)\n\n\nThis function takes an \nInstrument\n subtype \ninstype\n, and a property dictionary \np\n. The property dictionary is built out of an auxiliary JSON file described above.\n\n\nThis function is responsible for generating the \nInstrumentProperty\n subtypes to use with \ngetindex\n and \nsetindex!\n if they have not been defined already. Ordinarily these types are defined in the PainterQB module but if a really generic name is desired that makes sense for a class of instruments (e.g. \nVNA.Format\n) then the \nFormat\n subtype is defined in the \nPainterQB.VNA\n module. The defined subtype is then imported into the module where the \ninstype\n is defined.\n\n\nIf you an encounter an error where it appears like the subtypes were not defined, it may be that they are being referenced from a module that did an \nimport\n statement too soon, before all relevant \nInstrumentProperty\n subtypes were defined and exported. Ordinarily this is not a problem.\n\n\n#\n\n\nPainterQB.generate_handlers\n \n \nFunction\n.\n\n\n\n\ngenerate_handlers{S\n:Instrument}(instype::Type{S}, p)\n\n\nThis function takes an \nInstrument\n subtype \ninstype\n, and a property dictionary \np\n. The property dictionary is built out of an auxiliary JSON file described above.\n\n\nIn some cases, an instrument command does not except numerical arguments but rather a small set of options. Here is an example of the property dictionary (prior to parsing) for such a command, which sets/gets the format for a given channel and trace on the E5071C vector network analyzer:\n\n\n{\n\n    \ncmd\n:\n:CALCch:TRACtr:FORM\n,\n\n    \ntype\n:\nVNA.Format\n,\n\n    \nvalues\n:[\n\n        \nv::Symbol in symbols\n\n    \n],\n\n    \nsymbols\n:{\n\n        \nLogMagnitude\n:\nMLOG\n,\n\n        \nPhase\n:\nPHAS\n,\n\n        \nGroupDelay\n:\nGDEL\n,\n\n        \nSmithLinear\n:\nSLIN\n,\n\n        \nSmithLog\n:\nSLOG\n,\n\n        \nSmithComplex\n:\nSCOM\n,\n\n        \nSmith\n:\nSMIT\n,\n\n        \nSmithAdmittance\n:\nSADM\n,\n\n        \nPolarLinear\n:\nPLIN\n,\n\n        \nPolarLog\n:\nPLOG\n,\n\n        \nPolarComplex\n:\nPOL\n,\n\n        \nLinearMagnitude\n:\nMLIN\n,\n\n        \nSWR\n:\nSWR\n,\n\n        \nRealPart\n:\nREAL\n,\n\n        \nImagPart\n:\nIMAG\n,\n\n        \nExpandedPhase\n:\nUPH\n,\n\n        \nPositivePhase\n:\nPPH\n\n    \n},\n\n    \ninfixes\n:[\n\n        \nch::Integer=1\n,\n\n        \ntr::Integer=1\n\n    \n],\n\n    \ndoc\n:\nHey\n\n\n}\n\n\n\n\n\n\nWe see here that the \nvalues\n key is saying that we are only going to accept \nSymbol\n type for our \nsetindex!\n method and the symbol has to come out of \nsymbols\n, a dictionary that is defined on the next line. The keys of this dictionary are going to be interpreted as symbols (e.g. \n:LogMagnitude\n) and the values are just ASCII strings to be sent to the instrument.\n\n\ngenerate_handlers\n makes a bidirectional mapping between the symbols and the strings. In this example, this is accomplished as follows:\n\n\nsymbols\n(\nins\n::\nE5071C\n,\n \n::\nType\n{\nVNA\n.\nFormat\n},\n \nv\n::\nSymbol\n)\n \n=\n \nsymbols\n(\nins\n,\n \nVNA\n.\nFormat\n,\n \nVal\n{\nv\n})\n\n\nsymbols\n(\nins\n::\nE5071C\n,\n \n::\nType\n{\nVNA\n.\nFormat\n},\n \n::\nType\n{\nVal\n{:\nLogMagnitude\n}})\n \n=\n \nMLOG\n \n# ... etc. for each symbol.\n\n\n\nVNA\n.\nFormat\n(\nins\n::\nE5071C\n,\n \ns\n::\nAbstractString\n)\n \n=\n \nVNA\n.\nFormat\n(\nins\n,\n \nVal\n{\nsymbol\n(\ns\n)})\n\n\nVNA\n.\nFormat\n(\nins\n::\nE5071C\n,\n \n::\nType\n{\nVal\n{\nsymbol\n(\nMLOG\n)}})\n \n=\n \n:\nLogMagnitude\n \n# ... etc. for each symbol.\n\n\n\n\n\n\nThe above methods will be defined in the E5071C module. Note that the function \nsymbols\n has its name chosen based on the dictionary name in the JSON file. Since this function is not exported from the instrument's module there should be few namespace worries and we maintain future flexibliity.\n\n\n#\n\n\nPainterQB.generate_configure\n \n \nFunction\n.\n\n\n\n\ngenerate_configure{S\n:Instrument}(instype::Type{S}, p)\n\n\nThis function takes an \nInstrument\n subtype \ninstype\n, and a property dictionary \np\n. The property dictionary is built out of an auxiliary JSON file described above.\n\n\nThis function generates and documents a method for \ngetindex\n. The method is defined in the module where the instrument type was defined.\n\n\n#\n\n\nPainterQB.generate_inspect\n \n \nFunction\n.\n\n\n\n\ngenerate_inspect{S\n:Instrument}(instype::Type{S}, p)\n\n\nThis function takes an \nInstrument\n subtype \ninstype\n, and a property dictionary \np\n. The property dictionary is built out of an auxiliary JSON file described above.\n\n\nThis function generates and documents a method for \ngetindex\n. The method is defined in the module where the instrument type was defined.", 
            "title": "Implementation"
        }, 
        {
            "location": "/implementation/#implementation-overview", 
            "text": "", 
            "title": "Implementation overview"
        }, 
        {
            "location": "/implementation/#code-organization", 
            "text": "Each instrument is defined within its own module, a submodule of  PainterQB . Each instrument is a subtype of  InstrumentVISA  : Instrument . By convention, instrument model numbers are used for module definitions (e.g.  AWG5014C ), so type names have \"Ins\" prepended (e.g.  InsAWG5014 ).  InstrumentVISA  and associated functions are defined in  src/VISA.jl .  Low-level wrappers for shared libraries are kept in their own packages (e.g.  VISA  and  Alazar  calls). This way, at least some code can be reused if someone else does not want to use our codebase.  Early instrument definitions and functions like  Instrument  and  InstrumentException  are defined in  src/Definitions.jl . If there is ever trouble with  InstrumentProperty  subtypes not being defined by the time they are used in a function, they can be defined and exported manually here.  export  statements from an instrument submodule are not currently exported from  PainterQB . Therefore you may want to type  using PainterQB.AWG5014C  when using the AWG, for instance.", 
            "title": "Code organization"
        }, 
        {
            "location": "/implementation/#metaprogramming-for-visa-instruments", 
            "text": "Many commercial instruments support a common communications protocol and command syntax (VISA and SCPI respectively). For such instruments, methods for  setindex!  and  getindex  can be generated with metaprogramming, rather than typing them out explicitly.  The file  src/Metaprogramming.jl  is used heavily for code generation based on JSON template files. Since much of the logic for talking to instruments is the same between VISA instruments, in some cases no code needs to be written to control a new instrument provided an appropriate template file is prepared. The metaprogramming functions are described below although they are not intended to be used interactively.  #  PainterQB.insjson     Function .   insjson(file::AbstractString)  Parses a JSON file with a standardized schema to describe how to control an instrument.  Here is an example of a valid JSON file with valid schema for parsing:  { \n     instrument :{ \n             module : E5071C , \n             type : InsE5071C , \n             make : Keysight , \n             model : E5071C , \n             writeterminator : \\n \n     }, \n     properties :[ \n         { \n             cmd : :CALCch:TRACtr:CORR:EDEL:TIME , \n             type : VNA.ElectricalDelay , \n             values :[ \n                 v::Real \n             ], \n             infixes :[ \n                 ch::Integer=1 , \n                 tr::Integer=1 \n             ], \n             doc :   My documentation \n         } \n     ]  }   After loading with  JSON.parse , all dictionary keys are converted to symbols. The  instrument  dictionary is described in the  generate_instruments  documentation. The  properties  array contains one or more dictionaries, each with keys:   cmd : Specifies what must be sent to the instrument (it should be terminated with \"?\" for query-only). The lower-case characters are replaced by infix arguments.  type : Specifies the  InstrumentProperty  subtype to use this command. Will be parsed and evaluated.  values : Specifies the required arguments for  setindex!  which will appear after  cmd  in the string sent to the instrument.  infixes : Specifies the infix arguments in  cmd . Symbol names must match infix arguments. This key is not required if there are no infixes.  doc : Specifies documentation for the generated Julia functions. This key is not required if there is no documentation. This is used not only for interactive help but also in generating the documentation you are reading.   The value of the  properties.type  field and entries in the  properties.values  and  properties.infixes  arrays are parsed by Julia into expressions or symbols for further manipulation.  insjson{T :Instrument}(::Type{T})  Simple wrapper to call  insjson  on the appropriate file path for a given instrument type.  #  PainterQB.generate_all     Function .   generate_all(metadata)  This function takes a dictionary of instrument metadata, typically obtained from a call to  insjson . It will go through the following steps:   generate_instruments  part 1: If the module for this instrument does not already exist, generate it and import required modules and symbols.  generate_instruments  part 2: Define the  Instrument  subtype and the  make  and  model  methods ( make  and  model  are defined in  src/Definitions.jl ). Export the subtype.  generate_properties : Generate instrument properties if they do not exist already, and do any necessary importing and exporting.  generate_handlers : Generate \"handler\" methods to convert between symbols and SCPI string args.  generate_inspect : Generate  getindex  methods for instrument properties.  generate_configure : Generate  setindex!  methods for instrument properties.   generate_all  should be called near the start of an instrument's .jl file, if one exists. It is not required to have a source file for each instrument if the automatically generated code is sufficient.  #  PainterQB.generate_instruments     Function .   generate_instruments(metadata)  This function takes a dictionary of metadata, typically obtained from a call to  insjson . It operates on the  :instrument  field of the dictionary which is expected to have the following structure:   module : The module name. Can already exist but is created if it does not. This field is converted from a string to a  Symbol  by  insjson .  type : The name of the type to create for the new instrument. This field is converted from a string to a  Symbol  by  insjson .  super : This field is optional. If provided it will be the supertype of the new instrument type, otherwise the supertype will be  InstrumentVISA . This field is converted from a string to a  Symbol  by  insjson .  make : The make of the instrument, e.g. Keysight, Tektronix, etc.  model : The model of the instrument, e.g. E5071C, AWG5014C, etc.  writeterminator : Write termination string for sending SCPI commands.   By convention we typically have the module name be the same as the model name, and the type is just the model prefixed by \"Ins\", e.g.  InsE5071C . This is not required.  #  PainterQB.generate_properties     Function .   generate_properties{S :Instrument}(instype::Type{S}, p)  This function takes an  Instrument  subtype  instype , and a property dictionary  p . The property dictionary is built out of an auxiliary JSON file described above.  This function is responsible for generating the  InstrumentProperty  subtypes to use with  getindex  and  setindex!  if they have not been defined already. Ordinarily these types are defined in the PainterQB module but if a really generic name is desired that makes sense for a class of instruments (e.g.  VNA.Format ) then the  Format  subtype is defined in the  PainterQB.VNA  module. The defined subtype is then imported into the module where the  instype  is defined.  If you an encounter an error where it appears like the subtypes were not defined, it may be that they are being referenced from a module that did an  import  statement too soon, before all relevant  InstrumentProperty  subtypes were defined and exported. Ordinarily this is not a problem.  #  PainterQB.generate_handlers     Function .   generate_handlers{S :Instrument}(instype::Type{S}, p)  This function takes an  Instrument  subtype  instype , and a property dictionary  p . The property dictionary is built out of an auxiliary JSON file described above.  In some cases, an instrument command does not except numerical arguments but rather a small set of options. Here is an example of the property dictionary (prior to parsing) for such a command, which sets/gets the format for a given channel and trace on the E5071C vector network analyzer:  { \n     cmd : :CALCch:TRACtr:FORM , \n     type : VNA.Format , \n     values :[ \n         v::Symbol in symbols \n     ], \n     symbols :{ \n         LogMagnitude : MLOG , \n         Phase : PHAS , \n         GroupDelay : GDEL , \n         SmithLinear : SLIN , \n         SmithLog : SLOG , \n         SmithComplex : SCOM , \n         Smith : SMIT , \n         SmithAdmittance : SADM , \n         PolarLinear : PLIN , \n         PolarLog : PLOG , \n         PolarComplex : POL , \n         LinearMagnitude : MLIN , \n         SWR : SWR , \n         RealPart : REAL , \n         ImagPart : IMAG , \n         ExpandedPhase : UPH , \n         PositivePhase : PPH \n     }, \n     infixes :[ \n         ch::Integer=1 , \n         tr::Integer=1 \n     ], \n     doc : Hey  }   We see here that the  values  key is saying that we are only going to accept  Symbol  type for our  setindex!  method and the symbol has to come out of  symbols , a dictionary that is defined on the next line. The keys of this dictionary are going to be interpreted as symbols (e.g.  :LogMagnitude ) and the values are just ASCII strings to be sent to the instrument.  generate_handlers  makes a bidirectional mapping between the symbols and the strings. In this example, this is accomplished as follows:  symbols ( ins :: E5071C ,   :: Type { VNA . Format },   v :: Symbol )   =   symbols ( ins ,   VNA . Format ,   Val { v })  symbols ( ins :: E5071C ,   :: Type { VNA . Format },   :: Type { Val {: LogMagnitude }})   =   MLOG   # ... etc. for each symbol.  VNA . Format ( ins :: E5071C ,   s :: AbstractString )   =   VNA . Format ( ins ,   Val { symbol ( s )})  VNA . Format ( ins :: E5071C ,   :: Type { Val { symbol ( MLOG )}})   =   : LogMagnitude   # ... etc. for each symbol.   The above methods will be defined in the E5071C module. Note that the function  symbols  has its name chosen based on the dictionary name in the JSON file. Since this function is not exported from the instrument's module there should be few namespace worries and we maintain future flexibliity.  #  PainterQB.generate_configure     Function .   generate_configure{S :Instrument}(instype::Type{S}, p)  This function takes an  Instrument  subtype  instype , and a property dictionary  p . The property dictionary is built out of an auxiliary JSON file described above.  This function generates and documents a method for  getindex . The method is defined in the module where the instrument type was defined.  #  PainterQB.generate_inspect     Function .   generate_inspect{S :Instrument}(instype::Type{S}, p)  This function takes an  Instrument  subtype  instype , and a property dictionary  p . The property dictionary is built out of an auxiliary JSON file described above.  This function generates and documents a method for  getindex . The method is defined in the module where the instrument type was defined.", 
            "title": "Metaprogramming for VISA instruments"
        }, 
        {
            "location": "/todo/", 
            "text": "General\n\n\n\n\n\n\nHow should we implement error-handling?\n\n\n\n\n\n\nHow should we implement background tasks?\n\n\n\n\n\n\nImplement confirmation of changed instrument properties.\n\n\n\n\n\n\n\n\nDocumentation\n\n\n\n\nImprove documentation of this package. \nDocumenter.jl\n\n\n\n\n\n\nUnits support\n\n\n\n\nFurther work on \nUnitful.jl\n\n\nConsider how to improve Julia Base to play nicely with Unitful.jl\n\n\nShould we start integrating support already?\n\n\n\n\n\n\nSaving and loading data\n\n\n\n\nDatabase for metadata?\n\n\nHow to save / load configurations for instruments? Maybe JSON files?\n\n\nHow to save / load data? Start with these packages: \nHDF5.jl\n, \nJLD.jl\n\n\n\n\n\n\nPlotting\n\n\n\n\n\n\nTake a look at \nPlots.jl\n\n\n\n\n\n\nLive plotting engine. Right now we are using the recently open-sourced \nPlotly.js library\n. The Julia process responsible for measurement dumps some JSON data into a web socket during a measurement. A web page connects to that web socket, parses the JSON data, and configures Plotly accordingly. It is not obvious that this is the best approach.\n\n\n\n\n\n\nThere are two places where notifications could be emitted for plotting: in \nmeasure\n or in \nsweep\n. Some thought should be given to how best to do this.\n\n\n\n\n\n\n\n\nInstrument-specific\n\n\n\n\nAWG5014C\n\n\n\n\nSequencer support needed.\n\n\n\n\n\n\nVNAs\n\n\n\n\nAlazar\n\n\n\n\nA lot has changed since this code was written. Probably it does not work as is.", 
            "title": "To do"
        }, 
        {
            "location": "/todo/#general", 
            "text": "How should we implement error-handling?    How should we implement background tasks?    Implement confirmation of changed instrument properties.", 
            "title": "General"
        }, 
        {
            "location": "/todo/#documentation", 
            "text": "Improve documentation of this package.  Documenter.jl", 
            "title": "Documentation"
        }, 
        {
            "location": "/todo/#units-support", 
            "text": "Further work on  Unitful.jl  Consider how to improve Julia Base to play nicely with Unitful.jl  Should we start integrating support already?", 
            "title": "Units support"
        }, 
        {
            "location": "/todo/#saving-and-loading-data", 
            "text": "Database for metadata?  How to save / load configurations for instruments? Maybe JSON files?  How to save / load data? Start with these packages:  HDF5.jl ,  JLD.jl", 
            "title": "Saving and loading data"
        }, 
        {
            "location": "/todo/#plotting", 
            "text": "Take a look at  Plots.jl    Live plotting engine. Right now we are using the recently open-sourced  Plotly.js library . The Julia process responsible for measurement dumps some JSON data into a web socket during a measurement. A web page connects to that web socket, parses the JSON data, and configures Plotly accordingly. It is not obvious that this is the best approach.    There are two places where notifications could be emitted for plotting: in  measure  or in  sweep . Some thought should be given to how best to do this.", 
            "title": "Plotting"
        }, 
        {
            "location": "/todo/#instrument-specific", 
            "text": "", 
            "title": "Instrument-specific"
        }, 
        {
            "location": "/todo/#awg5014c", 
            "text": "Sequencer support needed.", 
            "title": "AWG5014C"
        }, 
        {
            "location": "/todo/#vnas", 
            "text": "", 
            "title": "VNAs"
        }, 
        {
            "location": "/todo/#alazar", 
            "text": "A lot has changed since this code was written. Probably it does not work as is.", 
            "title": "Alazar"
        }, 
        {
            "location": "/Alazar/", 
            "text": "Alazar digitizers\n\n\nWe put all Alazar digitizers in module \nAlazar\n; the feature set and API is so similar for the various models that just one module makes sense.\n\n\nA response type is given for each measurement mode: continuous streaming (\nContinuousStreamResponse\n), triggered streaming ( \nTriggeredStreamResponse\n), NPT records (\nNPTRecordResponse\n), and FPGA-based FFT calculations (\nFFTHardwareResponse\n). Traditional record mode has not been implemented yet for lack of immediate need.\n\n\nLooking at the source code, it would seem that there is some redundancy in the types, for instance there is an \nNPTRecordMode\n and an \nNPTRecordResponse\n object. The difference is that the former is used internally in the code to denote a particular method of configuring the instrument, allocating buffers, etc., whereas the latter specifies what you actually want to do: retrieve NPT records from the digitizer, perhaps doing some post-processing or processing during acquisition along the way. Perhaps different responses would dictate different processing behavior, while the instrument is ultimately configured the same way.\n\n\nIn the following discussion, it is important to understand some Alazar terminology. Newer Alazar digitizers use direct memory access (DMA) to stream data into a computer's RAM. A single \nacquisition\n uses one or many \nbuffers\n, which constitute preallocated regions in the computer's physical memory. Each buffer contains one or many \nrecords\n. Each \nrecord\n contains many \nsamples\n, which are the voltages measured by the digitizer.\n\n\nIn streaming mode, there is only one record per buffer, but in other modes there can be many records per buffer.\n\n\n\n\nBuffer allocation\n\n\n\n\nDigitizer requirements\n\n\nThe Alazar digitizers expect buffers in physical memory which are page-aligned. The size of each buffer should also be chosen appropriately.\n\n\nThe behavior of the digitizer is not specified when the buffer is made larger than 64 MB. On our computer, it seems like an \nApiWaitTimeout\n error is thrown when the buffer is too large (for some unspecified definition of \"large\" greater than 64 MB). The digitizer will then throw \nApiInsufficientResources\n errors whenever another acquisition is attempted, until the computer is restarted. Just restarting the Julia kernel, forcing a reload of the Alazar DLLs, does not appear to be enough to reset the digitizer fully.\n\n\nFor performance reasons, a buffer should not be made much smaller than 1 MB if mulitple buffers are required. There is also a minimum record size for each model of digitizer. For the ATS9360, if a record has fewer than 256 samples (could be 128 from channel A + 128 from channel B) then the acquisition will proceed, but return garbage data. Allocating too small of a buffer is therefore still bad, but less fatal than allocating one that is too large.\n\n\n\n\n\n\n\nHow to allocate appropriate buffers in Julia\n\n\nIn Julia, just allocating a fixed-size array will not necessarily return a page-aligned block in memory. One approach would be to allocate our own page-aligned memory using \nvalloc\n and \nvfree\n (or their Windows equivalents).\n\n\nfunction virtualalloc{T\n:Union{UInt8,UInt16}}(size_bytes::Integer, ::Type{T})\n    @windows? begin\n        MEM_COMMIT = U32(0x1000)\n        PAGE_READWRITE = U32(0x4)\n        addr = ccall((:VirtualAlloc, \nKernel32\n), Ptr{T},\n                     (Ptr{Void}, Culonglong, Culong, Culong),\n                     C_NULL, size_bytes, MEM_COMMIT, PAGE_READWRITE)\n    end : (@linux? begin\n        addr = ccall((:valloc, libc), Ptr{T}, (Culonglong,), size_bytes)\n    end : throw(SystemError()))\n\n    addr == C_NULL \n throw(OutOfMemoryError())\n\n    addr::Ptr{T}\nend\n\nfunction virtualfree{T\n:Union{UInt16,UInt8}}(addr::Ptr{T})\n    @windows? begin\n        MEM_RELEASE = 0x8000\n        ccall((:VirtualFree, \nKernel32\n), Cint, (Ptr{Void}, Culonglong, Culong),\n            addr, Culonglong(0), MEM_RELEASE)\n    end : (@linux? begin\n        ccall((:free, \nlibc\n), Void, (Ptr{Void},), addr)\n    end : throw(SystemError()))\n    nothing\nend\n\n\n\n\n\nIn case it wasn't obvious, this was my original approach. Note that memory allocated in this way will not be visible to multiple processes without extra work, and moreover we will need to deallocate the memory ourselves at a later time, perhaps using \nfinalizer()\n if the memory is made to be part of a Julia object.\n\n\nFortunately, there is a special kind of array in Julia called the \nSharedArray\n. It can be viewed and modified from multiple processes, and the memory is page-aligned. Hopefully this continues to be the case in future Julia releases. We implement a type called the \nDMABufferArray\n whose definition is worth repeating here:\n\n\ntype DMABufferArray{sample_type} \n:\n        AbstractArray{Ptr{sample_type},1}\n\n    bytes_buf::Int\n    n_buf::Int\n    backing::SharedArray{sample_type}\n\n    DMABufferArray(bytes_buf, n_buf) = begin\n        n_buf \n 1 \n bytes_buf % Base.Mmap.PAGESIZE != 0 \n\n            error(\nBytes per buffer must be a multiple of Base.Mmap.PAGESIZE when \n,\n                  \nthere is more than one buffer.\n)\n\n        backing = SharedArray(sample_type,\n                        Int((bytes_buf * n_buf) / sizeof(sample_type)))\n\n        dmabuf = new(bytes_buf,\n                     n_buf,\n                     backing)\n\n        return dmabuf\n    end\n\nend\n\nBase.size(dma::DMABufferArray) = (dma.n_buf,)\nBase.linearindexing(::Type{DMABufferArray}) = Base.LinearFast()\nBase.getindex(dma::DMABufferArray, i::Int) =\n    pointer(dma.backing) + (i-1) * dma.bytes_buf\nBase.length(dma::DMABufferArray) = dma.n_buf\n\nbytespersample{T}(buf_array::DMABufferArray{T}) = sizeof(T)\nsampletype{T}(buf_array::DMABufferArray{T}) = T\n\n\n\n\n\nSome comments:\n\n\n\n\nA single SharedArray is used to back \nall\n DMA buffers. Memory is therefore contiguous and page-aligned.\n\n\nThe memory for each DMA buffer is required to be a multiple of the page size when there is more than one buffer.\n\n\nThe memory can be accessed by multiple processes.\n\n\nThe elements of a \nDMABufferArray\n are pointers to the the different locations in memory which act as DMA buffers. The array is iterable and indexable as usual.", 
            "title": "Alazar digitizers"
        }, 
        {
            "location": "/Alazar/#alazar-digitizers", 
            "text": "We put all Alazar digitizers in module  Alazar ; the feature set and API is so similar for the various models that just one module makes sense.  A response type is given for each measurement mode: continuous streaming ( ContinuousStreamResponse ), triggered streaming (  TriggeredStreamResponse ), NPT records ( NPTRecordResponse ), and FPGA-based FFT calculations ( FFTHardwareResponse ). Traditional record mode has not been implemented yet for lack of immediate need.  Looking at the source code, it would seem that there is some redundancy in the types, for instance there is an  NPTRecordMode  and an  NPTRecordResponse  object. The difference is that the former is used internally in the code to denote a particular method of configuring the instrument, allocating buffers, etc., whereas the latter specifies what you actually want to do: retrieve NPT records from the digitizer, perhaps doing some post-processing or processing during acquisition along the way. Perhaps different responses would dictate different processing behavior, while the instrument is ultimately configured the same way.  In the following discussion, it is important to understand some Alazar terminology. Newer Alazar digitizers use direct memory access (DMA) to stream data into a computer's RAM. A single  acquisition  uses one or many  buffers , which constitute preallocated regions in the computer's physical memory. Each buffer contains one or many  records . Each  record  contains many  samples , which are the voltages measured by the digitizer.  In streaming mode, there is only one record per buffer, but in other modes there can be many records per buffer.", 
            "title": "Alazar digitizers"
        }, 
        {
            "location": "/Alazar/#buffer-allocation", 
            "text": "", 
            "title": "Buffer allocation"
        }, 
        {
            "location": "/Alazar/#digitizer-requirements", 
            "text": "The Alazar digitizers expect buffers in physical memory which are page-aligned. The size of each buffer should also be chosen appropriately.  The behavior of the digitizer is not specified when the buffer is made larger than 64 MB. On our computer, it seems like an  ApiWaitTimeout  error is thrown when the buffer is too large (for some unspecified definition of \"large\" greater than 64 MB). The digitizer will then throw  ApiInsufficientResources  errors whenever another acquisition is attempted, until the computer is restarted. Just restarting the Julia kernel, forcing a reload of the Alazar DLLs, does not appear to be enough to reset the digitizer fully.  For performance reasons, a buffer should not be made much smaller than 1 MB if mulitple buffers are required. There is also a minimum record size for each model of digitizer. For the ATS9360, if a record has fewer than 256 samples (could be 128 from channel A + 128 from channel B) then the acquisition will proceed, but return garbage data. Allocating too small of a buffer is therefore still bad, but less fatal than allocating one that is too large.", 
            "title": "Digitizer requirements"
        }, 
        {
            "location": "/Alazar/#how-to-allocate-appropriate-buffers-in-julia", 
            "text": "In Julia, just allocating a fixed-size array will not necessarily return a page-aligned block in memory. One approach would be to allocate our own page-aligned memory using  valloc  and  vfree  (or their Windows equivalents).  function virtualalloc{T :Union{UInt8,UInt16}}(size_bytes::Integer, ::Type{T})\n    @windows? begin\n        MEM_COMMIT = U32(0x1000)\n        PAGE_READWRITE = U32(0x4)\n        addr = ccall((:VirtualAlloc,  Kernel32 ), Ptr{T},\n                     (Ptr{Void}, Culonglong, Culong, Culong),\n                     C_NULL, size_bytes, MEM_COMMIT, PAGE_READWRITE)\n    end : (@linux? begin\n        addr = ccall((:valloc, libc), Ptr{T}, (Culonglong,), size_bytes)\n    end : throw(SystemError()))\n\n    addr == C_NULL   throw(OutOfMemoryError())\n\n    addr::Ptr{T}\nend\n\nfunction virtualfree{T :Union{UInt16,UInt8}}(addr::Ptr{T})\n    @windows? begin\n        MEM_RELEASE = 0x8000\n        ccall((:VirtualFree,  Kernel32 ), Cint, (Ptr{Void}, Culonglong, Culong),\n            addr, Culonglong(0), MEM_RELEASE)\n    end : (@linux? begin\n        ccall((:free,  libc ), Void, (Ptr{Void},), addr)\n    end : throw(SystemError()))\n    nothing\nend  In case it wasn't obvious, this was my original approach. Note that memory allocated in this way will not be visible to multiple processes without extra work, and moreover we will need to deallocate the memory ourselves at a later time, perhaps using  finalizer()  if the memory is made to be part of a Julia object.  Fortunately, there is a special kind of array in Julia called the  SharedArray . It can be viewed and modified from multiple processes, and the memory is page-aligned. Hopefully this continues to be the case in future Julia releases. We implement a type called the  DMABufferArray  whose definition is worth repeating here:  type DMABufferArray{sample_type}  :\n        AbstractArray{Ptr{sample_type},1}\n\n    bytes_buf::Int\n    n_buf::Int\n    backing::SharedArray{sample_type}\n\n    DMABufferArray(bytes_buf, n_buf) = begin\n        n_buf   1   bytes_buf % Base.Mmap.PAGESIZE != 0  \n            error( Bytes per buffer must be a multiple of Base.Mmap.PAGESIZE when  ,\n                   there is more than one buffer. )\n\n        backing = SharedArray(sample_type,\n                        Int((bytes_buf * n_buf) / sizeof(sample_type)))\n\n        dmabuf = new(bytes_buf,\n                     n_buf,\n                     backing)\n\n        return dmabuf\n    end\n\nend\n\nBase.size(dma::DMABufferArray) = (dma.n_buf,)\nBase.linearindexing(::Type{DMABufferArray}) = Base.LinearFast()\nBase.getindex(dma::DMABufferArray, i::Int) =\n    pointer(dma.backing) + (i-1) * dma.bytes_buf\nBase.length(dma::DMABufferArray) = dma.n_buf\n\nbytespersample{T}(buf_array::DMABufferArray{T}) = sizeof(T)\nsampletype{T}(buf_array::DMABufferArray{T}) = T  Some comments:   A single SharedArray is used to back  all  DMA buffers. Memory is therefore contiguous and page-aligned.  The memory for each DMA buffer is required to be a multiple of the page size when there is more than one buffer.  The memory can be accessed by multiple processes.  The elements of a  DMABufferArray  are pointers to the the different locations in memory which act as DMA buffers. The array is iterable and indexable as usual.", 
            "title": "How to allocate appropriate buffers in Julia"
        }, 
        {
            "location": "/awg5014c/", 
            "text": "#\n\n\nBase.getindex\n \n \nFunction\n.\n\n\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,::\nType\n{\nPainterQB\n.\nVoltageOffset\n},\nch\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \nSOURch:VOLT:OFFS?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,::\nType\n{\nPainterQB\n.\nWavelistLength\n})\n\n\n\n\n\n\n\n\nSCPI command: \nWLIST:SIZE?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,::\nType\n{\nPainterQB\n.\nTriggerTimer\n})\n\n\n\n\n\n\n\n\nSCPI command: \nTRIG:TIM?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,::\nType\n{\nPainterQB\n.\nTriggerLevel\n})\n\n\n\n\n\n\n\n\nSCPI command: \nTRIG:LEV?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,::\nType\n{\nPainterQB\n.\nSequencerType\n})\n\n\n\n\n\n\n\n\nSCPI command: \nAWGC:SEQ:POS?\n\n\n\n\nReturns current sequencer type.\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,::\nType\n{\nPainterQB\n.\nSequencerPosition\n})\n\n\n\n\n\n\n\n\nSCPI command: \nAWGC:SEQ:POS?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,::\nType\n{\nPainterQB\n.\nSequencerLoopCount\n},\nel\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \nSEQ:ELEMel:LOOP:COUN?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,::\nType\n{\nPainterQB\n.\nSequencerLength\n})\n\n\n\n\n\n\n\n\nSCPI command: \nSEQ:LENG?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,::\nType\n{\nPainterQB\n.\nSequencerInfiniteLoop\n},\nel\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \nSEQ:ELEMel:LOOP:INF?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,::\nType\n{\nPainterQB\n.\nSequencerGOTOTarget\n},\nel\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \nSEQ:ELEMel:GOTO:IND?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,::\nType\n{\nPainterQB\n.\nSequencerGOTOState\n},\nel\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \nSEQ:ELEMel:GOTO:STAT?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,::\nType\n{\nPainterQB\n.\nSequencerEventJumpTarget\n},\nel\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \nSEQ:ELEMel:JTAR:IND?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,::\nType\n{\nPainterQB\n.\nRepRate\n})\n\n\n\n\n\n\n\n\nSCPI command: \nAWGC:RRAT?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,::\nType\n{\nPainterQB\n.\nRepRateHeld\n})\n\n\n\n\n\n\n\n\nSCPI command: \nAWGC:RRAT:HOLD?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,::\nType\n{\nPainterQB\n.\nRefOscMultiplier\n})\n\n\n\n\n\n\n\n\nSCPI command: \nSOUR:ROSC:MULT?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,::\nType\n{\nPainterQB\n.\nRefOscFrequency\n})\n\n\n\n\n\n\n\n\nSCPI command: \nSOUR:ROSC:FREQ?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,::\nType\n{\nPainterQB\n.\nOutputFilterFrequency\n},\nch\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \nOUTPch:FILT:FREQ?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,::\nType\n{\nPainterQB\n.\nMarkerDelay\n},\nch\n::\nInteger\n=\n1\n,\nm\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \nSOURch:MARKm:DEL?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,::\nType\n{\nPainterQB\n.\nExtOscDividerRate\n})\n\n\n\n\n\n\n\n\nSCPI command: \nAWGC:CLOC:DRAT?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,::\nType\n{\nPainterQB\n.\nDCOutputLevel\n})\n\n\n\n\n\n\n\n\nSCPI command: \nAWGC:DCch:VOLT:OFFS?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,::\nType\n{\nPainterQB\n.\nDCOutput\n})\n\n\n\n\n\n\n\n\nSCPI command: \nAWGC:DC:STAT?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,::\nType\n{\nPainterQB\n.\nChannelOutput\n},\nch\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \nOUTPch:STAT?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,::\nType\n{\nPainterQB\n.\nAnalogOutputDelay\n},\nch\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \nSOURch:DELAY?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,::\nType\n{\nPainterQB\n.\nTriggerSource\n})\n\n\n\n\n\n\n\n\nSCPI command: \nTRIG:SOUR?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,::\nType\n{\nPainterQB\n.\nTriggerSlope\n})\n\n\n\n\n\n\n\n\nSCPI command: \nTRIG:POL?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,::\nType\n{\nPainterQB\n.\nTriggerImpedance\n})\n\n\n\n\n\n\n\n\nSCPI command: \nTRIG:IMP?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,::\nType\n{\nPainterQB\n.\nTriggerMode\n})\n\n\n\n\n\n\n\n\nSCPI command: \nAWGC:RMOD?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,::\nType\n{\nPainterQB\n.\nOscillatorSource\n})\n\n\n\n\n\n\n\n\nSCPI command: \nSOUR:ROSC:SOUR?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,::\nType\n{\nPainterQB\n.\nOutputPhase\n},\nch\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \nSOURch:PHAS?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,::\nType\n{\nPainterQB\n.\nEventTiming\n})\n\n\n\n\n\n\n\n\nSCPI command: \nEVEN:JTIM?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,::\nType\n{\nPainterQB\n.\nEventSlope\n})\n\n\n\n\n\n\n\n\nSCPI command: \nEVEN:POL?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,::\nType\n{\nPainterQB\n.\nEventImpedance\n})\n\n\n\n\n\n\n\n\nSCPI command: \nEVEN:IMP?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,::\nType\n{\nPainterQB\n.\nClockSource\n})\n\n\n\n\n\n\n\n\nSCPI command: \nAWGC:CLOC:SOUR?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,::\nType\n{\nPainterQB\n.\nClockSlope\n})\n\n\n\n\n\n\n\n\nSCPI command: \nAWGC:CLOC:SLOP?\n\n\n\n\nHey\n\n\n#\n\n\nBase.setindex!\n \n \nFunction\n.\n\n\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,\nv\n::\nReal\n,::\nType\n{\nPainterQB\n.\nVoltageOffset\n},\nch\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \nSOURch:VOLT:OFFS\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,\nv\n::\nReal\n,::\nType\n{\nPainterQB\n.\nTriggerTimer\n})\n\n\n\n\n\n\n\n\nSCPI command: \nTRIG:TIM\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,\nv\n::\nReal\n,::\nType\n{\nPainterQB\n.\nTriggerLevel\n})\n\n\n\n\n\n\n\n\nSCPI command: \nTRIG:LEV\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,\nv\n::\nInteger\n,::\nType\n{\nPainterQB\n.\nSequencerLoopCount\n},\nel\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \nSEQ:ELEMel:LOOP:COUN\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,\nv\n::\nInteger\n,::\nType\n{\nPainterQB\n.\nSequencerLength\n})\n\n\n\n\n\n\n\n\nSCPI command: \nSEQ:LENG\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,\nv\n::\nBool\n,::\nType\n{\nPainterQB\n.\nSequencerInfiniteLoop\n},\nel\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \nSEQ:ELEMel:LOOP:INF\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,\nv\n::\nInteger\n,::\nType\n{\nPainterQB\n.\nSequencerGOTOTarget\n},\nel\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \nSEQ:ELEMel:GOTO:IND\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,\nv\n::\nBool\n,::\nType\n{\nPainterQB\n.\nSequencerGOTOState\n},\nel\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \nSEQ:ELEMel:GOTO:STAT\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,\nv\n::\nInteger\n,::\nType\n{\nPainterQB\n.\nSequencerEventJumpTarget\n},\nel\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \nSEQ:ELEMel:JTAR:IND\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,\nv\n::\nReal\n,::\nType\n{\nPainterQB\n.\nRepRate\n})\n\n\n\n\n\n\n\n\nSCPI command: \nAWGC:RRAT\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,\nv\n::\nBool\n,::\nType\n{\nPainterQB\n.\nRepRateHeld\n})\n\n\n\n\n\n\n\n\nSCPI command: \nAWGC:RRAT:HOLD\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,\nv\n::\nInteger\n,::\nType\n{\nPainterQB\n.\nRefOscMultiplier\n})\n\n\n\n\n\n\n\n\nSCPI command: \nSOUR:ROSC:MULT\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,\nv\n::\nReal\n,::\nType\n{\nPainterQB\n.\nRefOscFrequency\n})\n\n\n\n\n\n\n\n\nSCPI command: \nSOUR:ROSC:FREQ\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,\nv\n::\nReal\n,::\nType\n{\nPainterQB\n.\nOutputFilterFrequency\n},\nch\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \nOUTPch:FILT:FREQ\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,\nv\n::\nReal\n,::\nType\n{\nPainterQB\n.\nMarkerDelay\n},\nch\n::\nInteger\n=\n1\n,\nm\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \nSOURch:MARKm:DEL\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,\nv\n::\nInteger\n,::\nType\n{\nPainterQB\n.\nExtOscDividerRate\n})\n\n\n\n\n\n\n\n\nSCPI command: \nAWGC:CLOC:DRAT\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,\nv\n::\nReal\n,::\nType\n{\nPainterQB\n.\nDCOutputLevel\n})\n\n\n\n\n\n\n\n\nSCPI command: \nAWGC:DCch:VOLT:OFFS\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,\nv\n::\nBool\n,::\nType\n{\nPainterQB\n.\nDCOutput\n})\n\n\n\n\n\n\n\n\nSCPI command: \nAWGC:DC:STAT\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,\nv\n::\nBool\n,::\nType\n{\nPainterQB\n.\nChannelOutput\n},\nch\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \nOUTPch:STAT\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,\nv\n::\nReal\n,::\nType\n{\nPainterQB\n.\nAnalogOutputDelay\n},\nch\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \nSOURch:DELAY\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,\nv\n::\nSymbol\n,::\nType\n{\nPainterQB\n.\nTriggerSource\n})\n\n\n\n\n\n\n\n\nSCPI command: \nTRIG:SOUR\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,\nv\n::\nSymbol\n,::\nType\n{\nPainterQB\n.\nTriggerSlope\n})\n\n\n\n\n\n\n\n\nSCPI command: \nTRIG:POL\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,\nv\n::\nSymbol\n,::\nType\n{\nPainterQB\n.\nTriggerImpedance\n})\n\n\n\n\n\n\n\n\nSCPI command: \nTRIG:IMP\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,\nv\n::\nSymbol\n,::\nType\n{\nPainterQB\n.\nTriggerMode\n})\n\n\n\n\n\n\n\n\nSCPI command: \nAWGC:RMOD\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,\nv\n::\nSymbol\n,::\nType\n{\nPainterQB\n.\nOscillatorSource\n})\n\n\n\n\n\n\n\n\nSCPI command: \nSOUR:ROSC:SOUR\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,\nv\n::\nReal\n,::\nType\n{\nPainterQB\n.\nOutputPhase\n},\nch\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \nSOURch:PHAS\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,\nv\n::\nSymbol\n,::\nType\n{\nPainterQB\n.\nEventTiming\n})\n\n\n\n\n\n\n\n\nSCPI command: \nEVEN:JTIM\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,\nv\n::\nSymbol\n,::\nType\n{\nPainterQB\n.\nEventSlope\n})\n\n\n\n\n\n\n\n\nSCPI command: \nEVEN:POL\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,\nv\n::\nSymbol\n,::\nType\n{\nPainterQB\n.\nEventImpedance\n})\n\n\n\n\n\n\n\n\nSCPI command: \nEVEN:IMP\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,\nv\n::\nSymbol\n,::\nType\n{\nPainterQB\n.\nClockSource\n})\n\n\n\n\n\n\n\n\nSCPI command: \nAWGC:CLOC:SOUR\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nAWG5014C\n.\nInsAWG5014C\n,\nv\n::\nSymbol\n,::\nType\n{\nPainterQB\n.\nClockSlope\n})\n\n\n\n\n\n\n\n\nSCPI command: \nAWGC:CLOC:SLOP\n\n\n\n\nHey", 
            "title": "AWG5014C"
        }, 
        {
            "location": "/e5071c/", 
            "text": "#\n\n\nBase.getindex\n \n \nFunction\n.\n\n\n\n\n[:CALCulate#:TRACe#:MARKer#:FUNCtion:TRACking][http://ena.support.keysight.com/e5071c/manuals/webhelp/eng/programming/command_reference/calculate/scpi_calculate_ch_selected_marker_mk_function_tracking.htm]\n\n\nSet whether or not the marker search for marker \nm\n is repeated with trace updates.\n\n\n[CALCulate#:TRACe#:MARKer#:Y?][http://ena.support.keysight.com/e5071c/manuals/webhelp/eng/programming/command_reference/calculate/scpi_calculate_ch_selected_marker_mk_y.htm]\n\n\n[CALCulate#:TRACe#:MARKer#:X][http://ena.support.keysight.com/e5071c/manuals/webhelp/eng/programming/command_reference/calculate/scpi_calculate_ch_selected_marker_mk_x.htm]\n\n\n[CALCulate#:TRACe#:MARKer#:STATe][http://ena.support.keysight.com/e5071c/manuals/webhelp/eng/programming/command_reference/calculate/scpi_calculate_ch_selected_marker_mk_state.htm]\n\n\nQuery whether marker \nm\n is displayed for channel \nch\n and trace \ntr\n.\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,::\nType\n{\nPainterQB\n.\nTriggerOutput\n})\n\n\n\n\n\n\n\n\nSCPI command: \n:TRIG:OUTP?\n\n\n\n\n[TRIGger:OUTPut][http://ena.support.keysight.com/e5071c/manuals/webhelp/eng/programming/command_reference/trigger/scpi_trigger_output_state.htm]\n\n\nTurn on or off the external trigger output.\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,::\nType\n{\nPainterQB\n.\nTriggerSource\n})\n\n\n\n\n\n\n\n\nSCPI command: \n:TRIG:SOUR?\n\n\n\n\n[TRIGger:SEQuence:SOURce][http://ena.support.keysight.com/e5071c/manuals/webhelp/eng/programming/command_reference/trigger/scpi_trigger_sequence_source.htm]\n\n\nConfigure the trigger source: \nInternalTrigger\n, \nExternalTrigger\n, \nBusTrigger\n, \nManualTrigger\n.\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,::\nType\n{\nPainterQB\n.\nTriggerSlope\n})\n\n\n\n\n\n\n\n\nSCPI command: \n:TRIG:SLOP?\n\n\n\n\n[:TRIG:SEQ:EXT:SLOP][http://ena.support.keysight.com/e5071c/manuals/webhelp/eng/programming/command_reference/trigger/scpi_trigger_sequence_external_slope.htm]\n\n\nSet slope of external trigger input port: \nRisingTrigger\n, \nFallingTrigger\n.\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,::\nType\n{\nPainterQB\n.\nTransferFormat\n})\n\n\n\n\n\n\n\n\nSCPI command: \n:FORM:DATA?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,::\nType\n{\nPainterQB\n.\nTransferByteOrder\n})\n\n\n\n\n\n\n\n\nSCPI command: \n:FORM:BORD?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,::\nType\n{\nPainterQB\n.\nYReferencePosition\n},\nch\n::\nInteger\n=\n1\n,\ntr\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:DISP:WINDch:TRACtr:Y:RPOS?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,::\nType\n{\nPainterQB\n.\nYReferenceLevel\n},\nch\n::\nInteger\n=\n1\n,\ntr\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:DISP:WINDch:TRACtr:Y:RLEV?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,::\nType\n{\nPainterQB\n.\nYScalePerDivision\n},\nch\n::\nInteger\n=\n1\n,\ntr\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:DISP:WINDch:TRACtr:Y:PDIV?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,::\nType\n{\nPainterQB\n.\nYDivisions\n},\nch\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:DISP:WINDch:Y:DIV?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,::\nType\n{\nPainterQB\n.\nWaveguideCutoff\n},\nch\n::\nInteger\n=\n1\n,\ntr\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:CALCch:TRACtr:CORR:EDEL:WGC?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,::\nType\n{\nPainterQB\n.\nTraceMaximized\n},\nch\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:DISP:WINDch:MAX?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,::\nType\n{\nPainterQB\n.\nSmoothingAperture\n},\nch\n::\nInteger\n=\n1\n,\ntr\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:CALCch:TRACtr:SMO:APER?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,::\nType\n{\nPainterQB\n.\nSmoothing\n},\nch\n::\nInteger\n=\n1\n,\ntr\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:CALCch:TRACtr:SMO?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,::\nType\n{\nPainterQB\n.\nTraceDisplay\n},\nch\n::\nInteger\n=\n1\n,\ntr\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:DISP:WINDch:TRACtr:STAT?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,::\nType\n{\nPainterQB\n.\nPowerSweepFrequency\n},\nch\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:SENSch:FREQ?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,::\nType\n{\nPainterQB\n.\nPowerSlopeLevel\n},\nch\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:SOURch:POW:SLOP?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,::\nType\n{\nPainterQB\n.\nPowerSlope\n},\nch\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:SOURch:POW:SLOP:STAT?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,::\nType\n{\nPainterQB\n.\nPowerPortLevel\n},\nch\n::\nInteger\n=\n1\n,\nport\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:SOURch:POW:PORTport?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,::\nType\n{\nPainterQB\n.\nPowerLevel\n},\nch\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:SOURch:POW?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,::\nType\n{\nPainterQB\n.\nPowerCoupled\n},\nch\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:SOURch:POW:PORT:COUP?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,::\nType\n{\nPainterQB\n.\nPointTrigger\n})\n\n\n\n\n\n\n\n\nSCPI command: \n:TRIG:POIN?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,::\nType\n{\nPainterQB\n.\nPhaseOffset\n},\nch\n::\nInteger\n=\n1\n,\ntr\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:CALCch:TRACtr:CORR:OFFS:PHAS?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,::\nType\n{\nPainterQB\n.\nOutput\n})\n\n\n\n\n\n\n\n\nSCPI command: \n:OUTP?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,::\nType\n{\nPainterQB\n.\nNumPoints\n},\nch\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:SENSch:SWE:POIN?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,::\nType\n{\nPainterQB\n.\nNumTraces\n},\nch\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:CALCch:PAR:COUN?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,::\nType\n{\nPainterQB\n.\nIFBandwidth\n},\nch\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:SENSch:BAND?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,::\nType\n{\nPainterQB\n.\nFrequencySpan\n},\nch\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:SENSch:FREQ:SPAN?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,::\nType\n{\nPainterQB\n.\nFrequencyCenter\n},\nch\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:SENSch:FREQ:CENT?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,::\nType\n{\nPainterQB\n.\nFrequencyStop\n},\nch\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:SENSch:FREQ:STOP?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,::\nType\n{\nPainterQB\n.\nFrequencyStart\n},\nch\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:SENSch:FREQ:STAR?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,::\nType\n{\nPainterQB\n.\nExtTriggerLowLatency\n})\n\n\n\n\n\n\n\n\nSCPI command: \n:TRIG:EXT:LLAT?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,::\nType\n{\nPainterQB\n.\nExtTriggerDelay\n})\n\n\n\n\n\n\n\n\nSCPI command: \n:TRIG:EXT:DEL?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,::\nType\n{\nPainterQB\n.\nElectricalDelay\n},\nch\n::\nInteger\n=\n1\n,\ntr\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:CALCch:TRACtr:CORR:EDEL:TIME?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,::\nType\n{\nPainterQB\n.\nAveragingTrigger\n})\n\n\n\n\n\n\n\n\nSCPI command: \n:TRIG:AVER?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,::\nType\n{\nPainterQB\n.\nAveragingFactor\n},\nch\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:SENSch:AVER:COUN?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,::\nType\n{\nPainterQB\n.\nAveraging\n},\nch\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:SENSch:AVER?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,::\nType\n{\nPainterQB\n.\nTriggerOutputTiming\n})\n\n\n\n\n\n\n\n\nSCPI command: \n:TRIG:OUTP:POS?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,::\nType\n{\nPainterQB\n.\nTriggerOutputPolarity\n})\n\n\n\n\n\n\n\n\nSCPI command: \n:TRIG:OUTP:POL?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,::\nType\n{\nPainterQB\n.\nVNA\n.\nParameter\n},\nch\n::\nInteger\n=\n1\n,\ntr\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:CALCch:PARtr:DEF?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,::\nType\n{\nPainterQB\n.\nVNA\n.\nFormat\n},\nch\n::\nInteger\n=\n1\n,\ntr\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:CALCch:TRACtr:FORM?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,::\nType\n{\nPainterQB\n.\nElectricalMedium\n},\nch\n::\nInteger\n=\n1\n,\ntr\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:CALCch:TRACtr:CORR:EDEL:MED?\n\n\n\n\nHey\n\n\ngetindex\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,::\nType\n{\nPainterQB\n.\nSweepTime\n},\nch\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:SENSch:SWE:TIME?\n\n\n\n\nThis command sets/gets the sweep time of selected channel (ch). Before using this object to set the sweep time, turns OFF the auto setting of the sweep time (specify False with the SCPI.SENSe(Ch).SWEep.TIME.AUTO object). When Port IFBW is turned ON, this command returns the sweep time for Port 1.\n\n\n#\n\n\nBase.setindex!\n \n \nFunction\n.\n\n\n\n\nDISPlay:SPLit [E5071C][http://ena.support.keysight.com/e5071c/manuals/webhelp/eng/programming/command_reference/display/scpi_display_split.htm]\n\n\nsetindex!(ins::InstrumentVNA, ::Type{Windows}, a::AbstractArray{Int})\n\n\nConfigure the layout of graph windows using a matrix to abstract the layout. For instance, passing [1 2; 3 3] makes two windows in one row and a third window below.\n\n\n:CALC#:TRAC#:MARK#:X [E5071C][http://ena.support.keysight.com/e5071c/manuals/webhelp/eng/programming/command_reference/calculate/scpi_calculate_ch_selected_marker_mk_x.htm]\n\n\n[:CALC#:TRAC#:MARK#:STATe][http://ena.support.keysight.com/e5071c/manuals/webhelp/eng/programming/command_reference/calculate/scpi_calculate_ch_selected_marker_mk_state.htm]\n\n\nTurn on or off display of marker \nm\n for channel \nch\n and trace \ntr\n.\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,\nv\n::\nBool\n,::\nType\n{\nPainterQB\n.\nTriggerOutput\n})\n\n\n\n\n\n\n\n\nSCPI command: \n:TRIG:OUTP\n\n\n\n\n[TRIGger:OUTPut][http://ena.support.keysight.com/e5071c/manuals/webhelp/eng/programming/command_reference/trigger/scpi_trigger_output_state.htm]\n\n\nTurn on or off the external trigger output.\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,\nv\n::\nSymbol\n,::\nType\n{\nPainterQB\n.\nTriggerSource\n})\n\n\n\n\n\n\n\n\nSCPI command: \n:TRIG:SOUR\n\n\n\n\n[TRIGger:SEQuence:SOURce][http://ena.support.keysight.com/e5071c/manuals/webhelp/eng/programming/command_reference/trigger/scpi_trigger_sequence_source.htm]\n\n\nConfigure the trigger source: \nInternalTrigger\n, \nExternalTrigger\n, \nBusTrigger\n, \nManualTrigger\n.\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,\nv\n::\nSymbol\n,::\nType\n{\nPainterQB\n.\nTriggerSlope\n})\n\n\n\n\n\n\n\n\nSCPI command: \n:TRIG:SLOP\n\n\n\n\n[:TRIG:SEQ:EXT:SLOP][http://ena.support.keysight.com/e5071c/manuals/webhelp/eng/programming/command_reference/trigger/scpi_trigger_sequence_external_slope.htm]\n\n\nSet slope of external trigger input port: \nRisingTrigger\n, \nFallingTrigger\n.\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,\nv\n::\nSymbol\n,::\nType\n{\nPainterQB\n.\nTransferFormat\n})\n\n\n\n\n\n\n\n\nSCPI command: \n:FORM:DATA\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,\nv\n::\nSymbol\n,::\nType\n{\nPainterQB\n.\nTransferByteOrder\n})\n\n\n\n\n\n\n\n\nSCPI command: \n:FORM:BORD\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,\nv\n::\nInteger\n,::\nType\n{\nPainterQB\n.\nYReferencePosition\n},\nch\n::\nInteger\n=\n1\n,\ntr\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:DISP:WINDch:TRACtr:Y:RPOS\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,\nv\n::\nReal\n,::\nType\n{\nPainterQB\n.\nYReferenceLevel\n},\nch\n::\nInteger\n=\n1\n,\ntr\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:DISP:WINDch:TRACtr:Y:RLEV\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,\nv\n::\nReal\n,::\nType\n{\nPainterQB\n.\nYScalePerDivision\n},\nch\n::\nInteger\n=\n1\n,\ntr\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:DISP:WINDch:TRACtr:Y:PDIV\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,\nv\n::\nInteger\n,::\nType\n{\nPainterQB\n.\nYDivisions\n},\nch\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:DISP:WINDch:Y:DIV\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,\nv\n::\nReal\n,::\nType\n{\nPainterQB\n.\nWaveguideCutoff\n},\nch\n::\nInteger\n=\n1\n,\ntr\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:CALCch:TRACtr:CORR:EDEL:WGC\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,\nv\n::\nBool\n,::\nType\n{\nPainterQB\n.\nTraceMaximized\n},\nch\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:DISP:WINDch:MAX\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,\nv\n::\nReal\n,::\nType\n{\nPainterQB\n.\nSmoothingAperture\n},\nch\n::\nInteger\n=\n1\n,\ntr\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:CALCch:TRACtr:SMO:APER\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,\nv\n::\nBool\n,::\nType\n{\nPainterQB\n.\nSmoothing\n},\nch\n::\nInteger\n=\n1\n,\ntr\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:CALCch:TRACtr:SMO\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,\nv\n::\nBool\n,::\nType\n{\nPainterQB\n.\nTraceDisplay\n},\nch\n::\nInteger\n=\n1\n,\ntr\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:DISP:WINDch:TRACtr:STAT\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,\nv\n::\nReal\n,::\nType\n{\nPainterQB\n.\nPowerSweepFrequency\n},\nch\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:SENSch:FREQ\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,\nv\n::\nReal\n,::\nType\n{\nPainterQB\n.\nPowerSlopeLevel\n},\nch\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:SOURch:POW:SLOP\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,\nv\n::\nBool\n,::\nType\n{\nPainterQB\n.\nPowerSlope\n},\nch\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:SOURch:POW:SLOP:STAT\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,\nv\n::\nReal\n,::\nType\n{\nPainterQB\n.\nPowerPortLevel\n},\nch\n::\nInteger\n=\n1\n,\nport\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:SOURch:POW:PORTport\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,\nv\n::\nReal\n,::\nType\n{\nPainterQB\n.\nPowerLevel\n},\nch\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:SOURch:POW\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,\nv\n::\nBool\n,::\nType\n{\nPainterQB\n.\nPowerCoupled\n},\nch\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:SOURch:POW:PORT:COUP\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,\nv\n::\nBool\n,::\nType\n{\nPainterQB\n.\nPointTrigger\n})\n\n\n\n\n\n\n\n\nSCPI command: \n:TRIG:POIN\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,\nv\n::\nReal\n,::\nType\n{\nPainterQB\n.\nPhaseOffset\n},\nch\n::\nInteger\n=\n1\n,\ntr\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:CALCch:TRACtr:CORR:OFFS:PHAS\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,\nv\n::\nBool\n,::\nType\n{\nPainterQB\n.\nOutput\n})\n\n\n\n\n\n\n\n\nSCPI command: \n:OUTP\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,\nv\n::\nInteger\n,::\nType\n{\nPainterQB\n.\nNumPoints\n},\nch\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:SENSch:SWE:POIN\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,\nv\n::\nInteger\n,::\nType\n{\nPainterQB\n.\nNumTraces\n},\nch\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:CALCch:PAR:COUN\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,\nv\n::\nReal\n,::\nType\n{\nPainterQB\n.\nIFBandwidth\n},\nch\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:SENSch:BAND\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,\nv\n::\nReal\n,::\nType\n{\nPainterQB\n.\nFrequencySpan\n},\nch\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:SENSch:FREQ:SPAN\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,\nv\n::\nReal\n,::\nType\n{\nPainterQB\n.\nFrequencyCenter\n},\nch\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:SENSch:FREQ:CENT\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,\nv\n::\nReal\n,::\nType\n{\nPainterQB\n.\nFrequencyStop\n},\nch\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:SENSch:FREQ:STOP\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,\nv\n::\nReal\n,::\nType\n{\nPainterQB\n.\nFrequencyStart\n},\nch\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:SENSch:FREQ:STAR\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,\nv\n::\nBool\n,::\nType\n{\nPainterQB\n.\nExtTriggerLowLatency\n})\n\n\n\n\n\n\n\n\nSCPI command: \n:TRIG:EXT:LLAT\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,\nv\n::\nReal\n,::\nType\n{\nPainterQB\n.\nExtTriggerDelay\n})\n\n\n\n\n\n\n\n\nSCPI command: \n:TRIG:EXT:DEL\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,\nv\n::\nReal\n,::\nType\n{\nPainterQB\n.\nElectricalDelay\n},\nch\n::\nInteger\n=\n1\n,\ntr\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:CALCch:TRACtr:CORR:EDEL:TIME\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,\nv\n::\nBool\n,::\nType\n{\nPainterQB\n.\nAveragingTrigger\n})\n\n\n\n\n\n\n\n\nSCPI command: \n:TRIG:AVER\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,\nv\n::\nInteger\n,::\nType\n{\nPainterQB\n.\nAveragingFactor\n},\nch\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:SENSch:AVER:COUN\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,\nv\n::\nBool\n,::\nType\n{\nPainterQB\n.\nAveraging\n},\nch\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:SENSch:AVER\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,\nv\n::\nSymbol\n,::\nType\n{\nPainterQB\n.\nTriggerOutputTiming\n})\n\n\n\n\n\n\n\n\nSCPI command: \n:TRIG:OUTP:POS\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,\nv\n::\nSymbol\n,::\nType\n{\nPainterQB\n.\nTriggerOutputPolarity\n})\n\n\n\n\n\n\n\n\nSCPI command: \n:TRIG:OUTP:POL\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,\nv\n::\nSymbol\n,::\nType\n{\nPainterQB\n.\nVNA\n.\nParameter\n},\nch\n::\nInteger\n=\n1\n,\ntr\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:CALCch:PARtr:DEF\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,\nv\n::\nSymbol\n,::\nType\n{\nPainterQB\n.\nVNA\n.\nFormat\n},\nch\n::\nInteger\n=\n1\n,\ntr\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:CALCch:TRACtr:FORM\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,\nv\n::\nSymbol\n,::\nType\n{\nPainterQB\n.\nElectricalMedium\n},\nch\n::\nInteger\n=\n1\n,\ntr\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:CALCch:TRACtr:CORR:EDEL:MED\n\n\n\n\nHey\n\n\nsetindex!\n(\nins\n::\nPainterQB\n.\nE5071C\n.\nInsE5071C\n,\nv\n::\nReal\n,::\nType\n{\nPainterQB\n.\nSweepTime\n},\nch\n::\nInteger\n=\n1\n)\n\n\n\n\n\n\n\n\nSCPI command: \n:SENSch:SWE:TIME\n\n\n\n\nThis command sets/gets the sweep time of selected channel (ch). Before using this object to set the sweep time, turns OFF the auto setting of the sweep time (specify False with the SCPI.SENSe(Ch).SWEep.TIME.AUTO object). When Port IFBW is turned ON, this command returns the sweep time for Port 1.", 
            "title": "E5071C"
        }, 
        {
            "location": "/docbuild/", 
            "text": "Documentation build process\n\n\n\n\n\n\nDocumenter.jl\n is used to pull doc strings (including those generated by metaprogramming) from Julia source code and splice them into Markdown documents.\n\n\n\n\n\n\nmkdocs\n is used to build a website based on the Markdown files.\n\n\n\n\n\n\n\n\nUsage\n\n\nStarting from the home directory at the shell:\n\n\ncd .julia/v0.4/PainterQB/docs\njulia make.jl\n\n\n\n\n\nTo process with mkdocs:\n\n\nmkdocs build --clean\n\n\n\n\n\nTo serve locally:\n\n\nmkdocs serve\n\n\n\n\n\nTo publish to GitHub:\n\n\nmkdocs gh-deploy --clean", 
            "title": "Documentation building"
        }, 
        {
            "location": "/docbuild/#documentation-build-process", 
            "text": "Documenter.jl  is used to pull doc strings (including those generated by metaprogramming) from Julia source code and splice them into Markdown documents.    mkdocs  is used to build a website based on the Markdown files.", 
            "title": "Documentation build process"
        }, 
        {
            "location": "/docbuild/#usage", 
            "text": "Starting from the home directory at the shell:  cd .julia/v0.4/PainterQB/docs\njulia make.jl  To process with mkdocs:  mkdocs build --clean  To serve locally:  mkdocs serve  To publish to GitHub:  mkdocs gh-deploy --clean", 
            "title": "Usage"
        }, 
        {
            "location": "/releases/", 
            "text": "Releases\n\n\nv0.0.1      Currently under development", 
            "title": "Release notes"
        }, 
        {
            "location": "/releases/#releases", 
            "text": "v0.0.1      Currently under development", 
            "title": "Releases"
        }, 
        {
            "location": "/LICENSE/", 
            "text": "License\n\n\nMost code:\n\n\n\n\nCopyright (c) 2015: Andrew Keller.\n\n\n\n\nRandom.jl, Time.jl, and a few other snippets here and there:\n\n\n\n\nCopyright (c) 2014: Menyoung Lee.\n\n\n\n\nLarge majority of code in VISA.jl package:\n\n\n\n\nCopyright (c) 2014: Colm Ryan.\n\n\n\n\nAll of the code is licensed under the MIT \"Expat\" License by the respective copyright holders:\n\n\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }, 
        {
            "location": "/LICENSE/#license", 
            "text": "Most code:   Copyright (c) 2015: Andrew Keller.   Random.jl, Time.jl, and a few other snippets here and there:   Copyright (c) 2014: Menyoung Lee.   Large majority of code in VISA.jl package:   Copyright (c) 2014: Colm Ryan.   All of the code is licensed under the MIT \"Expat\" License by the respective copyright holders:   Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }
    ]
}